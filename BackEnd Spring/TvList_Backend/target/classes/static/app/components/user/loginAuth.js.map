{"version":3,"file":"loginAuth.js","sourceRoot":"","sources":["loginAuth.ts"],"names":[],"mappings":";;;;QAMa,UAAU,EAgBV,OAAO;;;;;;;;;;;;;YAhBP,wBAAA,UAAU,GAAG,UAAC,IAA0B,EAAE,QAA8B;gBACjF,IAAI,QAAQ,GAAa,0BAAW,EAAE,CAAC,CAAC,2CAA2C;gBACnF,IAAI,QAAQ,GAAgB,QAAQ,CAAC,GAAG,CAAC,0BAAW,CAAC,CAAC;gBACtD,IAAI,MAAM,GAAU,QAAQ,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;gBACzC,IAAI,UAAU,GAAM,QAAQ,CAAC,UAAU,CAAC;gBAExC,EAAE,CAAC,CAAC,UAAU,CAAC;oBACX,MAAM,CAAC,IAAI,CAAC;gBAChB,IAAI,CACJ,CAAC;oBACG,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;YAEL,CAAC,CAAA,CAAC;YAEW,qBAAA,OAAO,GAAG,UAAC,IAA0B,EAAE,QAA8B;gBAC9E,IAAI,QAAQ,GAAa,0BAAW,EAAE,CAAC,CAAC,2CAA2C;gBACnF,IAAI,QAAQ,GAAgB,QAAQ,CAAC,GAAG,CAAC,0BAAW,CAAC,CAAC;gBACtD,IAAI,MAAM,GAAU,QAAQ,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;gBACzC,IAAI,UAAU,GAAM,QAAQ,CAAC,UAAU,CAAC;gBAExC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC;oBACjC,MAAM,CAAC,IAAI,CAAC;gBAChB,IAAI,CACJ,CAAC;oBACG,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAEhC,CAAC;YAEL,CAAC,CAAA,CAAC","sourcesContent":["import {Injector} from 'angular2/core';\r\nimport {appInjector} from '../../app-injector';\r\nimport {Router, ComponentInstruction} from 'angular2/router';\r\nimport {userService} from './user.service';\r\nimport {user} from './user.data';\r\n\r\nexport const isLoggedIn = (next: ComponentInstruction, previous: ComponentInstruction) => {\r\n    let injector: Injector = appInjector(); // get the stored reference to the injector\r\n    let userServ: userService = injector.get(userService);\r\n    let router:Router = injector.get(Router);\r\n    let userLogged:user=userServ.userLogged;\r\n\r\n    if (userLogged)\r\n        return true;\r\n    else\r\n    {\r\n        router.navigate(['/Index']);\r\n        return false;\r\n    }\r\n\r\n};\r\n\r\nexport const isAdmin = (next: ComponentInstruction, previous: ComponentInstruction) => {\r\n    let injector: Injector = appInjector(); // get the stored reference to the injector\r\n    let userServ: userService = injector.get(userService);\r\n    let router:Router = injector.get(Router);\r\n    let userLogged:user=userServ.userLogged;\r\n\r\n    if (userLogged && userLogged.isAdmin)\r\n        return true;\r\n    else\r\n    {\r\n        router.navigate(['/Index']);\r\n\r\n    }\r\n\r\n};"]}