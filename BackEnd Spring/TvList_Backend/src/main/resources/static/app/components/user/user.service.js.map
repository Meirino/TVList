{"version":3,"file":"user.service.js","sourceRoot":"","sources":["user.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by david on 19/04/2016.\r\n */\r\nimport {Injectable,OnInit} from 'angular2/core';\r\nimport {user,userSpring} from './user.data';\r\nimport {Observable,ConnectableObservable,Subject } from 'rxjs/Rx';\r\nimport { Http, RequestOptions, Headers } from 'angular2/http';\r\nimport 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class userService{\r\n\r\n    public userLogged=null;\r\n    public usuario;\r\n\r\n\r\n    private listaUsuarios:user[]=[\r\n        new user(0,\"admin\",\"pass\",\"admin@tvlist.com\",true,\"Pepito\",\"Piscinas\",\"avatar1.png\"),\r\n        new user(1,\"david\",\"pass\",\"david@gmail.com\",false,\"David\",\"D\",\"avatar2.jpg\"),\r\n        new user(2,\"jose\",\"pass\",\"jose@gmail.com\",false,\"Jose\",\"J\",\"avatar3.png\")\r\n    ];\r\n    \r\n    private _autoid=3;\r\n\r\n    constructor(private http: Http){\r\n        this.reqIsLogged();\r\n    }\r\n\r\n    private _ponerUsuario(usr:user){\r\n        usr.isAdmin=false;\r\n        usr.id=this._autoid;\r\n        this.listaUsuarios.push(usr);\r\n        this._autoid++;\r\n    }\r\n\r\n    private _loginSucces = new Subject<boolean>();\r\n\r\n    public loginSucces$ = this._loginSucces.asObservable();\r\n\r\n\r\n    private loginUserInApp(usr:user){\r\n        this.userLogged=usr;\r\n        this._loginSucces.next(true);\r\n    }\r\n\r\n    public logOut(){\r\n        return this.http.get('logOut').map(\r\n            response => {\r\n                this.userLogged=null;\r\n                return response;\r\n            }\r\n        );\r\n    }\r\n\r\n    getUserByUser_And_Pass(userName:string, userPassword:string){\r\n\r\n\r\n        let userPass = userName + \":\" + userPassword;\r\n\r\n        let headers = new Headers({\r\n            'Authorization': 'Basic '+utf8_to_b64(userPass),\r\n            'X-Requested-With': 'XMLHttpRequest'\r\n        });\r\n\r\n        let options = new RequestOptions({headers});\r\n\r\n        var userStream= this.http.get('logIn', options).map(\r\n            response => {\r\n                this.processLogInResponse(response);\r\n                return this.usuario;\r\n            }\r\n        ).publishReplay(1);\r\n\r\n\r\n        var userAcceptedStream = userStream.map(x => {\r\n            if (x==null)\r\n                return false;\r\n            else\r\n                return true;\r\n        });\r\n\r\n        userStream.subscribe(\r\n            usr => {\r\n                this.loginUserInApp(usr);\r\n            },\r\n            error => {\r\n                console.log('BOOM');\r\n            }\r\n        );\r\n\r\n        userStream.connect();\r\n\r\n        return userAcceptedStream;\r\n    }\r\n\r\n\r\n    \r\n    checkIf_UserName_AND_Email_Free(userName:string,userMail:string):Observable<boolean>{\r\n        var doesThisUserExist = Observable.create((obs) => {\r\n            let error:string[]=['',''];\r\n            let numfails:number=0;\r\n            for (let userOb  of this.listaUsuarios){\r\n                if (userOb.user_Name==userName){\r\n                    error[0]='Nombre de usuario: '+userName+' ya existe, por favor elija otro';\r\n                    numfails++;\r\n                }\r\n                if (userOb.user_Email==userMail){\r\n                    error[1]='E-Mail: '+userMail+' ya existe, por favor elija otro';\r\n                    numfails++;\r\n                }\r\n                if (numfails==2)\r\n                    break;\r\n            }\r\n            if (numfails == 0)\r\n                obs.next(true);\r\n            else obs.error(error);\r\n                \r\n        });\r\n        return doesThisUserExist;\r\n    }\r\n    \r\n    \r\n\r\n    getUserByID(id:number):Observable<user> {\r\n        return Observable.fromArray(this.listaUsuarios).filter(x=>x.id ==id)\r\n    }\r\n\r\n    getAllUser():user[] {\r\n        return this.listaUsuarios;\r\n    }\r\n\r\n    createUser(userOb:user){\r\n        let userS = new userSpring(userOb);\r\n        let body = JSON.stringify(userS);\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest'\r\n        });\r\n        let options = new RequestOptions({ headers });\r\n\r\n        return this.http.post(\"/registerUser\", body, options)\r\n            .map(response => response.json())\r\n            .catch(error => error).subscribe(next=>{\r\n/*                this._ponerUsuario(next);\r\n                this.loginUserInApp(next);*/\r\n                this.getUserByUser_And_Pass(userOb.user_Name,userOb.user_Password);\r\n            });\r\n        /*\r\n        let usuarioCreado=Observable.create((obs)=>{\r\n            this._ponerUsuario(userOb);\r\n            this.loginUserInApp(userOb);\r\n            obs.next(userOb);\r\n            obs.complete();\r\n        }\r\n    );\r\n        return usuarioCreado;\r\n        */\r\n    }\r\n\r\n    setUserByID(luserOb:user):Observable<user> {\r\n       let usuarioActualizado=Observable.create(x=>{\r\n           for (let userOb  in this.listaUsuarios){\r\n               if (this.listaUsuarios[userOb].id==luserOb.id){\r\n                   this.listaUsuarios[userOb]=luserOb;\r\n                   x.next(luserOb);\r\n               }\r\n           }\r\n           x.error(false)\r\n       })\r\n        \r\n        return usuarioActualizado;\r\n    }\r\n\r\n    deleteUserByID(id:number):user {\r\n        return undefined;\r\n    }\r\n\r\n    private processLogInResponse(response){\r\n        this.userLogged = true;\r\n        let userdata = response.json();\r\n        this.usuario = new user(userdata.id,userdata.name,null,userdata.mail,userdata.admin,userdata.rname,userdata.surname,userdata.avatar,userdata.roles);\r\n        this.userLogged=this.usuario;\r\n    }\r\n\r\n    reqIsLogged(){\r\n\r\n        let headers = new Headers({\r\n            'X-Requested-With': 'XMLHttpRequest'\r\n        });\r\n\r\n        let options = new RequestOptions({headers});\r\n\r\n        this.http.get('logIn', options).subscribe(\r\n            response => this.processLogInResponse(response),\r\n            error => {\r\n                if(error.status != 401){\r\n                    console.error(\"Error when asking if logged: \"+\r\n                        JSON.stringify(error));\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction utf8_to_b64(str) {\r\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\r\n        return String.fromCharCode(<any>'0x' + p1);\r\n    }));\r\n}"]}